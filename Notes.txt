Encapsulation
is the act of enclosing something, sa if it were in a capsule. It means thinking carefully about the behaviors your classes 
need and then hiding the details of how they perform those behaviors even making it so other code cannot see or manipulate these details.

public class Account
{
    private List<int> _transactions = new List<int>(); 

    public void Deposit(int amount)
    {
        _transactions.Add(amount);
    }
}

Private will keep it hidden from other pats of the Program
Public makes it available to other parts of the Program

Good rule is to restrict acccess to class members as much as possible

As a general rule, attributes (or member variables) should be made private. 
Instead, the other parts of the program should ask the class to perform tasks related to that information through public methods.

public class Person
{
    private string _title;
    private string _firstName;
    private string _lastName;

    ...
}

Many methods (or member functions) of a class are public. This is the interface that other parts of the program can use to perform the tasks they need.

Are there ever private methods? Yes! Often, a public method will have internal steps or computations to perform to help it do its job.
These "helper functions" are often private, because the only code that needs to access them is in the class.

Example:
public class Person
{
    private string _title;
    private string _firstName;
    private string _lastName;

    public string GetInformalSignature()
    {
        return "Thanks, " + _firstName;
    }

    public string GetFormalSignature()
    {
        return "Sincerely, " + GetFullName();
    }

    private string GetFullName()
    {
        return _title + " " + _firstName + " " + _lastName;
    }
    ...
}

Getters and Setters:
Someitmes you may feel that other parts of the program need access to a member variable. If this is the case,
instead of making the variable public, you should create a meathod to get and set the value.
This ensures that the class still controls access to the evariables and that the variables themselves are hidden

public class Person
{
    private string _title;
    private string _firstName;
    private string _lastName;

    public string GetFirstName()
    {
        return _firstName;
    }

    public void SetFirstName(string firstName)
    {
        _firstName = firstName;
    }

    ...
}

Person p = new Person();
p.SetFirstName("Peter");

Console.WriteLine(p.GetFirstName());


Inheritance is the ability for one class to obtain the attributes and methods
 of another class directly, without having to type them. It follows the same idea of people inheriting certain characteristics from their parents.

 public class Person
{
    private string _name;

    public Person(string name)
    {
        _name = name;
    }

    public string GetName()
    {
        return _name;
    }
}

// a child class called Student
public class Student : Person
{
    private string _number;

    // calling the parent constructor using "base"!
    public Student(string name, string number) : base(name)
    {
      _number = number;
    }

    public string GetNumber()
    {
        return _number;
    }
}

Student student = new Student("Brigham", "234");
string name = student.GetName();
string number = student.GetNumber();
Console.WriteLine(name);
Console.WriteLine(number);


Brigham
234





Polymorphism the ability to take on many forms. When one line of code can have different behavior depending on the context..
method overriding is the ability of a child class to override or change the behavior of a meathod that it inherited from a parent class
the class name stays the same but the behavior or the code to run is different


// the parent class showing the "virtual" keyword included
public class Employee
{
  private float salary = 100f;

  public virtual float CalculatePay()
  {
    return salary;
  }
}

// a child class
public class HourlyEmployee : Employee
{
  private float rate = 9f;
  private float hours = 100f;
//where override takes place
  public override float CalculatePay()
  {
    return rate * hours; // pay is calculated differently
  }
}


Inheritance and Method Overriding are a powerful combination. Used together they provide a way to vary runtime behavior according to the context.
The Liskov Substitution Principle (LSP) is one of the five SOLID principles of object-oriented programming. It states:

“Objects of a superclass should be replaceable with objects of a subclass without affecting the correctness of the program.”

Key Idea
A subclass should be able to stand in for its parent class without breaking functionality.
 This ensures that the derived class extends the behavior of the base class without changing its fundamental behaviors

 
// the parent class showing the "virtual" keyword included
public abstract class Employee
{
  private string _employeeName;

  // Notice the abstract method doesn't have a body at all (not even an empty one)
  // and it is followed by a semicolon.
  public abstract float CalculatePay();
}

// a child class
public class SalaryEmployee : Employee
{
  private float salary = 100f;

  public override float CalculatePay()
  {
    return salary;
  }
}

// a child class
public class HourlyEmployee : Employee
{
  private float rate = 9f;
  private float hours = 100f;

  public override float CalculatePay()
  {
    return rate * hours; // pay is calculated differently
  }
}

